// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Commands to know:
// `npx prisma generate` - update TypeScript definitions based on this schema
// `npx prisma db push` - push the schema changes to the database
// `npx prisma studio` - open the Studio, which allows you to edit the schema.
// `npx prisma migrate reset` - reset the migrations to the last version. This will reset the DB and run the seed script
// `npx prisma migrate dev --name <descriptive-name>` - generate a migration file for any changes you make to the schema (this will be committed).

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id              Int           @id @default(autoincrement())
    email           String        @unique
    name            String
    username        String        @unique
    nonce           String        @unique @default(uuid())
    deletedAt       DateTime?     @map("deleted_at")
    lastLoginAt     DateTime?     @map("last_login_at")
    lastActiveAt    DateTime?     @map("last_active_at")
    emailVerifiedAt DateTime?     @map("email_verified_at")
    createdAt       DateTime      @default(now()) @map("created_at")
    profile         UserProfile?
    password        UserPassword?
    image           UserImage?
    sessions        Session[]
    roles           Role[]
    wallets         Wallet[]

    @@map("users")
}

model UserProfile {
    id      Int     @id @default(autoincrement())
    bio     String?
    website String?
    userId  Int     @unique @map(name: "user_id")
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_profiles")
}

model UserPassword {
    hash   String
    userId Int    @unique @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@index([userId], name: "user_passwords_user_id")
    @@map("user_passwords")
}

model UserImage {
    id          Int      @id @default(autoincrement())
    altText     String?
    contentType String
    blob        Bytes
    userId      Int      @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("user_images")
}

model Wallet {
    address     String    @id
    label       String    @default("")
    userId      Int?      @map("user_id")
    createdAt   DateTime  @default(now()) @map("created_at")
    connectedAt DateTime? @map("connected_at")
    user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@index([userId], name: "wallets_user_id")
    @@index([address], name: "wallets_address")
    @@map("wallets")
}

model Session {
    id             Int      @id @default(autoincrement())
    expirationDate DateTime @map("expiration_date")
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @updatedAt @map("updated_at")
    userId         Int?
    user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@index([userId], name: "sessions_user_id")
    @@map("sessions")
}

model Role {
    id        Int      @id @default(autoincrement())
    role      String   @unique @default("USER")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    users     User[]

    @@map("roles")
}
